<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://cutter.re//index.xml" rel="self" type="application/atom+xml" /><link href="https://cutter.re//" rel="alternate" type="text/html" /><updated>2019-09-06T06:55:23+00:00</updated><id>https://cutter.re//index.xml</id><title type="html">Cutter</title><subtitle>Open Source RE Platform powered by radare2.</subtitle><entry><title type="html">Decrypting APT33’s Dropshot Malware with Radare2 and Cutter – Part 1</title><link href="https://cutter.re//analyzing-dropshot-part-1" rel="alternate" type="text/html" title="Decrypting APT33’s Dropshot Malware with Radare2 and Cutter – Part 1" /><published>2019-07-26T09:12:09+00:00</published><updated>2019-07-26T09:12:09+00:00</updated><id>https://cutter.re//analyzing-dropshot-part-1</id><content type="html" xml:base="https://cutter.re//analyzing-dropshot-part-1">&lt;h1 id=&quot;prologue&quot;&gt;Prologue&lt;/h1&gt;

&lt;p&gt;As a reverse engineer and malware researcher, the tools I use are super important for me. I have invested hours and hours in creating the best malware analysis environment for myself and chose the best tools for me and my needs. For the last two years, radare2 is my go-to tool for a lot of reverse-engineering tasks such as automating RE related work, scripting, CTFing, exploitation and more. That said, I almost never used radare2 for malware analysis, or more accurately, for analysis of malware for Windows.&lt;/p&gt;
&lt;p&gt;The main reason was that radare2 command-line interface felt too clumsy, complicated and an over-kill. IDA Pro was simply better for these tasks, a quick inspection of functions, data structures, renaming, commenting, et cetera. It felt more intuitive for me and that what I was searching for while doing malware analysis. And then came Cutter.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.megabeets.net/decrypting-dropshot-with-radare2-and-cutter-part-1/&quot; target=&quot;_blank&quot; class=&quot;dwn-btn3 btn btn-primary&quot;&gt;&lt;span&gt;Read on megabeets.net&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;but&gt;
&lt;/but&gt;</content><author><name>Itay Cohen</name></author><category term="Plugins" /><summary type="html">Prologue</summary></entry><entry><title type="html">Decrypting APT33’s Dropshot Malware with Radare2 and Cutter – Part 2</title><link href="https://cutter.re//analyzing-dropshot-part-2" rel="alternate" type="text/html" title="Decrypting APT33’s Dropshot Malware with Radare2 and Cutter – Part 2" /><published>2019-07-26T09:12:09+00:00</published><updated>2019-07-26T09:12:09+00:00</updated><id>https://cutter.re//analyzing-dropshot-part-2</id><content type="html" xml:base="https://cutter.re//analyzing-dropshot-part-2">&lt;h1 id=&quot;prologue&quot;&gt;Prologue&lt;/h1&gt;

&lt;p&gt;Previously, in the first part of this article, we used Cutter, a GUI for radare2, to statically analyze APT33’s Dropshot malware. We also used radare2’s Python scripting capabilities in order to decrypt encrypted strings in Dropshot. If you didn’t read the first part yet, I suggest you do it &lt;a href=&quot;https://www.megabeets.net/decrypting-dropshot-with-radare2-and-cutter-part-21&quot;&gt;now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today’s article will be shorter, now that we are familiar with cutter and r2pipe, we can quickly analyze another interesting component of Dropshot — an encrypted resource that includes Dropshot’s actual payload. So without further ado, let’s start.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.megabeets.net/decrypting-dropshot-with-radare2-and-cutter-part-2/&quot; target=&quot;_blank&quot; class=&quot;dwn-btn3 btn btn-primary&quot;&gt;&lt;span&gt;Read on megabeets.net&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;but&gt;
&lt;/but&gt;</content><author><name>Itay Cohen</name></author><category term="Plugins" /><summary type="html">Prologue</summary></entry></feed>